server {
  listen 80 default_server;
  server_name halva.example.com;

  include /etc/nginx/snippets/letsencrypt.conf;

  location / {
    return 301 https://halva.example.com$request_uri;
  }
}

upstream halva {
	server 127.0.0.1:3000;
}

upstream oauth_proxy {
	server 127.0.0.1:4180;
}

## serve https
server {
  server_name halva.example.com;
  listen 443 ssl http2 default_server;

  ssl_certificate /etc/letsencrypt/live/halva.example.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/halva.example.com/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/halva.example.com/fullchain.pem;
  include /etc/nginx/snippets/ssl.conf;
  add_header Strict-Transport-Security max-age=2592000;

  location /oauth2/ {
    proxy_pass       http://oauth_proxy;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
  }

  #root /var/www/halva.example.com;
  #index index.html;
  location / {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    proxy_pass http://halva;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Scheme $scheme;
    proxy_connect_timeout 1;
    proxy_send_timeout 30;
    proxy_read_timeout 72h;

    location /video.mjpg {
      proxy_buffering off;
      proxy_pass http://127.0.0.1:8080/?action=stream;
    }
  }
}
